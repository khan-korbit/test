name: Gitleaks Scan

on:
  pull_request:
    branches: [ main ] # main 브랜치로의 PR에 대해서만 실행
  # push 이벤트는 main 브랜치 병합 시에만 스캔하도록 제한하는 것이 좋습니다.
  # push:
  #   branches: [ main ]

jobs:
  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # PR의 모든 커밋을 가져와야 비교가 가능하므로 fetch-depth는 0으로 유지합니다.
        with:
          fetch-depth: 0

      - name: Setup Gitleaks baseline
        # main 브랜치에 있는 베이스라인 파일을 사용합니다.
        # PR 타겟 브랜치가 main이 아닐 경우, 'origin/${{ github.base_ref }}' 등으로 수정할 수 있습니다.
        run: |
          git checkout origin/main -- gitleaks-baseline.json
          if [ ! -f gitleaks-baseline.json ]; then
            echo "Baseline file not found. Creating an empty one to prevent errors."
            echo "[]" > gitleaks-baseline.json
          fi

      - name: Run Gitleaks Scan on Pull Request
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          # 베이스라인 파일을 기준으로 새로운 탐지 건만 보고하도록 설정
          baseline_path: gitleaks-baseline.json
        # 이 스텝은 새로운 탐지 건이 있을 때만 실패합니다.

      - name: Gitleaks scan passed
        if: success()
        run: echo "✅ Gitleaks scan passed. No new leaks found."

      - name: Send Slack notification on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: "🚨 Gitleaks Alert: New Secrets Detected in PR!"
          SLACK_MESSAGE: |
            A Gitleaks scan detected potential new secrets in Pull Request #${{ github.event.pull_request.number }}.
            Author: @${{ github.actor }}
            Please review the findings in the 'Gitleaks Scan' check and take immediate action.
            PR Link: ${{ github.event.pull_request.html_url }}
          SLACK_COLOR: 'danger'
          SLACK_USERNAME: "Gitleaks Bot"
          SLACK_ICON_EMOJI: ":gitleaks:"
          MSG_MINIMAL: true
